{"version":3,"sources":["assets/config.ts","utils/getUserInfo.ts","assets/gameEnv.ts","utils/calculate.ts","components/InsertUser.tsx","utils/division.ts","components/DivTeam.tsx","utils/checkValidTeam.ts","components/DragNDrop.tsx","App.tsx","index.tsx"],"names":["serverUrl","getUserAccountId","userId","a","axios","get","response","console","log","data","userAccountId","Error","getUserInfo","id","userInfo","tierMMR","IRON","BRONZE","SILVER","GOLD","PLATINUM","DIAMOND","MASTER","GRANDMASTER","CHALLENGER","rankMMR","IV","III","II","I","calculate","wins","losses","rank","tier","leaguePoints","Math","round","Search","styled","input","SearchButton","button","divUserId","combinedID","divisionId","match","userIdGroup","map","element","replace","undefined","underRankMMR","underRankUserInfo","position","team","mmr","getUserRankInfo","userInfoList","el","queueType","filter","getUserInfoList","idState","Promise","all","name","userRankInfo","length","message","alert","fetchUserInfoList","filtUndefinedData","InsertUser","props","setUserInfoList","React","useState","setIdState","addId","e","type","onChange","target","value","onClick","makeBitMaskDivision","teamBitMask","userNoTeam","sort","b","userOneTeam","userTwoTeam","allUser","push","splitedIdx","splice","compareOne","idx","compareTwo","divisionPosition","userInfoListWithIdx","topUser","jugUser","midUser","adcUser","supUser","checkSelectedTeam","userListLength","i","teamOne","teamTwo","reverseI","DivTeamContainer","div","PrintTeam","TeamName","h4","teamColor","css","DivTeam","userList","diff","teamOneBitMask","teamTwoBitMask","teamOneMMR","teamTwoMMR","count","k","teamDiff","abs","index","redTeam","blueTeam","divisionTeam","checkValidTeam","setTeamOne","Set","size","setTeamTwo","overlapPosition","excessPersonnel","DragNDropStyle","DropStyle","DragNDrop","positionChange","changeUserPosition","err","onDragEnd","result","draggableId","destination","movedTeam","droppableId","moveUserInfo","parseInt","provided","droppableProps","ref","innerRef","dragHandleProps","draggableProps","placeholder","SelectOptionUser","DivTeamButton","App","runDivTeam","setRunDivTeam","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAAaA,EAAY,8DCGZC,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEAELC,IAAMC,IAAN,UAAaL,EAAb,kDAAgEE,IAF3D,UAEtBI,EAFsB,OAG5BC,QAAQC,IAAIF,EAASG,OACjBH,EAJwB,yCAKjBA,EAASG,KAAKC,eALG,aAOlB,IAAIC,MAAM,oBAPQ,2CAAH,sDAWhBC,EAAW,uCAAG,WAAOC,GAAP,eAAAV,EAAA,sEAEAC,IAAMC,IAAN,UAAaL,EAAb,yCAAuDa,IAFvD,YAEjBP,EAFiB,iDAIZA,EAASG,KAAKK,UAJF,aAMb,IAAIH,MAAM,sBANG,2CAAH,sDCAXI,EAAkB,CAC7BC,KAAM,IACNC,OAAO,IACPC,OAAO,KACPC,KAAK,KACLC,SAAS,KACTC,QAAQ,KAERC,OAAO,KACPC,YAAY,KACZC,WAAW,MAOAC,EAAkB,CAC7BC,GAAI,EACJC,IAAK,IACLC,GAAI,IACJC,EAAG,KCVQC,EAAY,SAAChB,GACxB,IAvBkBiB,EAAYC,EAMVC,EAAYC,EAAYC,EAoB5C,OA1BkBJ,EAuBmBjB,EAASiB,KAvBhBC,EAuBqBlB,EAASkB,ODYjC,IClCXI,KAAKC,MAAON,GAAMA,EAAKC,GAAQ,IAAO,IAAM,GAC5C,MAIIC,EAmBgBnB,EAASmB,KAnBbC,EAmBkBpB,EAASoB,KAnBfC,EAmBoBrB,EAASqB,aARrDpB,EAAQmB,GACRT,EAAQQ,GACOE,I,cChB/BG,EAASC,IAAOC,MAAV,0CAINC,EAAeF,IAAOG,OAAV,qKAWZC,EAAY,SAACC,GACjB,IACMC,EAAaD,EAAWE,MADf,+IAGTC,EAAW,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAYG,KAAI,SAACC,GACnC,OAAOA,EAAQC,QAAQ,8EAAkB,OAE3C,OAAmB,OAAfL,EACK,CAACD,QAEYO,IAAhBJ,EAAkCA,EAC/B,CAAC,KAKNK,EAA2B,CAC/BlB,KAAM,SACND,KAAM,IACNF,KAAM,EACNC,OAAQ,EACRG,aAAc,GAGVkB,EAA2B,yBAC/BnD,OAAQ,IACLkD,GAF4B,IAG/BE,SAAU,OACVC,KAAM,EACNC,IAAK1B,EAAUsB,KAGXK,EAAkB,SAACC,GA0BvB,OAxBqBA,EAAaV,KAAI,SAACW,GAErC,GAAqB,oBAAjBA,EAAGC,UAAiC,CAAC,IAC/B1B,EAAuCyB,EAAvCzB,KAAKD,EAAkC0B,EAAlC1B,KAAKF,EAA6B4B,EAA7B5B,KAAKC,EAAwB2B,EAAxB3B,OAAOG,EAAiBwB,EAAjBxB,aAK9B,MAAO,CACLjC,OAAQ,GACRgC,OACAD,OACAF,OACAC,SACAG,eACAoB,KAAM,EACNC,IAAK1B,EAZyB,CAC9BI,OAAKD,OAAKF,OAAKC,SAAOG,sBAczB0B,QAAO,SAACF,GACT,GAAIA,EACF,OAAO,KAGS,IAGhBG,EAAe,uCAAG,WAAOC,EAAeL,GAAtB,iBAAAvD,EAAA,sEAEU6D,QAAQC,IAAItB,EAAUoB,GAASf,IAAnB,uCAAuB,WAAMC,GAAN,uBAAA9C,EAAA,+EAEtCF,EAAiBgD,GAFqB,uBAExDpC,EAFwD,EAExDA,GAAGqD,EAFqD,EAErDA,KAFqD,SAIxCtD,EAAYC,GAJ4B,UAIzDC,EAJyD,OAMzDqD,EANyD,uCAO1Dd,GACAI,EAAgB3C,IAR0C,IAS7DZ,OAAQgE,IASmB,IAJPR,EAAaG,QAAO,SAACZ,GACzC,GAAIA,EAAQ/C,SAAWgE,EAAM,OAAO,KAGpBE,OAlB6C,yDAqBxDD,IArBwD,+DA0BvD,KAAIE,QA1BmD,OA2BxD,qBA3BwD,QA8BxD,uBA9BwD,gCA4B3DC,MAAM,GAAD,OAAIrB,EAAJ,kFA5BsD,oCA+B3DqB,MAAM,GAAD,OAAIrB,EAAJ,8FA/BsD,6BAkC3DqB,MAAM,GAAD,OAAI,KAAID,QAAR,6CAlCsD,0DAAvB,wDAFtB,cAEhBE,EAFgB,OAyChBC,EAAoBD,EAAkBV,QAAO,SAACF,GAAQ,GAAIA,EAAI,OAAO,KAzCrD,kBA0Cfa,GA1Ce,2CAAH,wDAuENC,EArBI,SAACC,GAAkB,IAC7BhB,EAAiCgB,EAAjChB,aAAciB,EAAmBD,EAAnBC,gBADc,EAELC,IAAMC,SAAiB,IAFlB,mBAE5Bd,EAF4B,KAEnBe,EAFmB,KAI7BC,EAAK,uCAAG,WAAOC,GAAP,eAAA7E,EAAA,sEAEY2D,EAAgBC,EAAQL,GAFpC,OAENpD,EAFM,OAIZqE,EAAgB,GAAD,mBACVrE,GADU,YAEVoD,KANO,2CAAH,sDAUX,OACE,qCACE,cAACpB,EAAD,CAAQ2C,KAAK,OAAOC,SAAU,SAACF,GAAOF,EAAWE,EAAEG,OAAOC,UAC1D,cAAC3C,EAAD,CAAc4C,QAASN,EAAvB,8BC1IAO,EAAsB,SAAC5B,EAA6B6B,GACtD,IAAMC,EAAa9B,EAAaG,QAAO,SAACF,GACpC,OAAgB,IAAZA,EAAGJ,QAIRkC,MAAK,SAACtF,EAAEuF,GACP,OAAOA,EAAElC,IAAMrD,EAAEqD,OAGfmC,EAAcjC,EAAaG,QAAO,SAACF,GACrC,GAAgB,IAAZA,EAAGJ,KACH,OAAO,KAEZkC,MAAK,SAACtF,EAAEuF,GACP,OAAOA,EAAElC,IAAMrD,EAAEqD,OAGfoC,EAAclC,EAAaG,QAAO,SAACF,GACrC,GAAgB,IAAZA,EAAGJ,KACH,OAAO,KAEZkC,MAAK,SAACtF,EAAEuF,GACP,OAAOA,EAAElC,IAAMrD,EAAEqD,OAGjBqC,EAAU,GAWd,GAVID,EAAY,IACZC,EAAQC,KAAKF,EAAY,IAEzBD,EAAY,IACZE,EAAQC,KAAKH,EAAY,IAEzBH,EAAW,IACXK,EAAQC,KAAR,MAAAD,EAAO,YAAUL,IAGjBK,EAAQzB,OAAS,EACjB,OAAO,EAEP,IAAI2B,EAAaF,EAAQG,OAAO,EAAE,GAI5BC,EAAaV,EAAe,GAHtBQ,EAAW,GAAGG,IAIpBC,EAAaZ,EAAe,GAHtBQ,EAAW,GAAGG,IAK1B,QAAID,IAAcE,KAGC,IAAfF,GAAmC,IAAfE,IAO1BC,EAAmB,SAAC1C,EAAyB6B,GAC/C,IAAMc,EAAoC3C,EAAaV,KAAI,SAACW,EAAGuC,GAC3D,OAAO,aACHA,IAAIA,GACDvC,MAIL2C,EAAUD,EAAoBxC,QAAO,SAACF,GACxC,GAAoB,QAAhBA,EAAGL,SAAoB,OAAO,KAGhCiD,EAAUF,EAAoBxC,QAAO,SAACF,GACxC,GAAoB,YAAhBA,EAAGL,SAAwB,OAAO,KAGpCkD,EAAUH,EAAoBxC,QAAO,SAACF,GACxC,GAAoB,QAAhBA,EAAGL,SAAoB,OAAO,KAGhCmD,EAAUJ,EAAoBxC,QAAO,SAACF,GACxC,GAAoB,QAAhBA,EAAGL,SAAoB,OAAO,KAGhCoD,EAAUL,EAAoBxC,QAAO,SAACF,GACxC,GAAoB,YAAhBA,EAAGL,SAAwB,OAAO,KAG1C,QAAIgD,EAAQlC,QAAU,IACbkB,EAAoBgB,EAAQf,QAKjCgB,EAAQnC,QAAU,IACbkB,EAAoBiB,EAAQhB,QAIjCiB,EAAQpC,QAAU,IACbkB,EAAoBkB,EAAQjB,QAIjCkB,EAAQrC,QAAU,IACbkB,EAAoBmB,EAAQlB,OAIjCmB,EAAQtC,QAAU,IACbkB,EAAoBoB,EAAQnB,QAOnCoB,EAAoB,SAACC,EAAuBC,EAASC,EAAeC,GAEtE,IAAMC,GAAY,GAAGJ,GAAgB,EAAEC,EAEvC,QAAKA,EAAEC,KAAaA,IAAYE,EAASD,KAAaA,MAIjDC,EAASF,KAAaA,IAAYD,EAAEE,KAAaA,IC5HpDE,EAAmB1E,IAAO2E,IAAV,0EAKhBC,EAAY5E,IAAO2E,IAAV,qIASTE,EAAW7E,IAAO8E,GAAV,2EAIV,YAAgC,IAA9BC,EAA6B,EAA7BA,UACF,MAAkB,QAAdA,EACKC,YAAP,gEAMqB,SAAdD,EACAC,YAAP,wEADG,KAqCMC,EAzBC,SAAC9C,GAAkB,IAAD,ED6FP,SAAC+C,GAOxB,IANA,IAAIlC,GAAe,EACfmC,GAAQ,EACNd,EAAiBa,EAASrD,OAE5BuD,EAAiB,EACjBC,EAAiB,EACZf,EAAI,EAAIA,EAAID,EAAgBC,IACR,IAArBY,EAASZ,GAAGtD,KACZoE,GAAmB,GAAKd,EACI,IAArBY,EAASZ,GAAGtD,OACnBqE,GAAmB,GAAKf,GAIhCtG,QAAQC,IAAI,WAAYmH,EAAeC,GAEvC,IAAK,IAAIf,EAAI,EAAGA,EAAK,GAAGY,EAASrD,OAASyC,IAAK,CAM3C,IAJA,IAAIgB,EAAa,EACbC,EAAa,EACbC,EAAQ,EAEHC,EAAI,EAAGA,EAAIP,EAASrD,OAAQ4D,IAC3B,GAAKA,EAAKnB,GACZkB,GAAS,EACTF,GAAcJ,EAASO,GAAGxE,KAE1BsE,GAAcL,EAASO,GAAGxE,IAIlC,GAAIiE,EAASrD,OAAO,IAAM2D,GAIrB3B,EAAiBqB,EAASZ,KAE3BF,EAAkBC,EAAeC,EAAEc,EAAeC,GAAtD,CAEA,IAAMK,EAAWJ,EAAWC,IAEd,IAAVJ,GAAetF,KAAK8F,IAAIR,GAAQtF,KAAK8F,IAAID,MACzC1H,QAAQC,IAAIqG,GACZa,EAAOO,EACP1C,EAAcsB,IAItB,IAAMC,EAAUW,EAAS5D,QAAO,SAACZ,EAAQkF,GACrC,SAAI5C,EAAe,GAAG4C,MAMpBpB,EAAUU,EAAS5D,QAAO,SAACZ,EAAQkF,GACrC,QAAI5C,EAAe,GAAG4C,MAO1B,OAAIT,GAAQ,EACD,CACHU,QAAStB,EACTuB,SAAUtB,GAGP,CACHqB,QAASrB,EACTsB,SAAUvB,GCpKQwB,CAAa5D,EAAMhB,cAAxC0E,EADyB,EACzBA,QAASC,EADgB,EAChBA,SAEhB,OACE,eAACpB,EAAD,WACE,eAACE,EAAD,WACE,cAACC,EAAD,CAAUE,UAAU,MAApB,SAA2B,uBAC1Bc,EAAQpF,KAAI,SAACW,EAAGuC,GACf,OACE,4BAAcvC,EAAGzD,QAATgG,SAId,eAACiB,EAAD,WACE,cAACC,EAAD,CAAUE,UAAU,OAApB,SAA4B,uBAC3Be,EAASrF,KAAI,SAACW,EAAGuC,GAChB,OACE,4BAAcvC,EAAGzD,QAATgG,aCNPqC,EAAiB,SAAC7E,GAC3B,IAxD2B,SAACA,GAE5B,IAAMoD,EAAUpD,EAAaG,QAAO,SAACF,GACjC,GAAgB,IAAZA,EAAGJ,MAA8B,SAAhBI,EAAGL,SACpB,OAAO,KAEZN,KAAI,SAACW,GACJ,OAAOA,EAAGL,YAGRkF,EAAa,IAAIC,IAAI3B,GAC3B,GAAIA,EAAQ1C,SAAWoE,EAAWE,KAC9B,OAAO,EAGX,IAAM3B,EAAWrD,EAAaG,QAAO,SAACF,GAClC,GAAgB,IAAZA,EAAGJ,MAA8B,SAAhBI,EAAGL,SACpB,OAAO,KAEZN,KAAI,SAACW,GACJ,OAAOA,EAAGL,YAGRqF,EAAa,IAAIF,IAAI1B,GAC3B,OAAIA,EAAQ3C,SAAWuE,EAAWD,KAgC5BE,CAAgBlF,GAClB,MAAM,IAAI/C,MAAM,mBAEpB,IA5B2B,SAAC+C,GAO5B,QANgBA,EAAaG,QAAO,SAACF,GACjC,GAAgB,IAAZA,EAAGJ,KACH,OAAO,KAIHa,OAASV,EAAaU,OAAO,MAIxBV,EAAaG,QAAO,SAACF,GAClC,GAAgB,IAAZA,EAAGJ,KACH,OAAO,KAIHa,OAASV,EAAaU,OAAO,GAWnCyE,CAAgBnF,GAClB,MAAM,IAAI/C,MAAM,oB,OCzDlBmI,EAAiBvG,IAAO2E,IAAV,2GAMd6B,EAAYxG,IAAO2E,IAAV,2HAqNA8B,GAzMG,SAAC,GAA4C,IAA3CtF,EAA0C,EAA1CA,aAAciB,EAA4B,EAA5BA,gBACxBsE,EAAiB,SAACjE,GACpB,IAAM1B,EAAW0B,EAAEG,OAAOC,MAEpB8D,EAAqBxF,EAAaV,KAAI,SAACC,GACzC,OAAIA,EAAQ/C,SAAW8E,EAAEG,OAAOjB,KACzB,2BACAjB,GADP,IAEIK,SAAUA,IAGP,eACAL,MAIX,IACIsF,EAAeW,GACjB,MAAMC,GACJ,OAAQA,EAAI9E,SACZ,IAAK,kBACDC,MAAM,uFACN,MACJ,IAAK,kBACDA,MAAM,8FACN,MACJ,QACIA,MAAM,4CAGdK,EAAgBuE,IAwDpB,OACI,cAACJ,EAAD,UACI,eAAC,IAAD,CAAiBM,UAvBP,SAACC,GAAuB,IAC9BC,EAA6BD,EAA7BC,YAAaC,EAAgBF,EAAhBE,YAEfC,EAAYD,EAAeA,EAAYE,YAAc,IAErDC,EAAehG,EAAaV,KAAI,SAACW,GACnC,OAAIA,EAAGzD,SAAWoJ,EACP,2BACA3F,GADP,IAEIJ,KAAMoG,SAASH,KAGZ,eACA7F,MAIfpD,QAAQC,IAAIkJ,GACZ/E,EAAgB+E,IAKZ,UACI,cAAC,IAAD,CAAWD,YAAY,IAAvB,SACK,SAACG,GAAD,OACG,cAACb,EAAD,2BACQa,EAASC,gBADjB,IAEIC,IAAKF,EAASG,SAFlB,SAIKrG,EAAaG,QAAO,SAACF,GAClB,OAAgB,IAAZA,EAAGJ,QAERP,KAAI,SAACC,EAAQkF,GACZ,OACI,cAAC,IAAD,CAAWA,MAAOA,EAA4BmB,YAAarG,EAAQ/C,OAAnE,SACK,SAAC0J,GAAD,OACG,wDACIE,IAAKF,EAASG,UACVH,EAASI,iBACTJ,EAASK,gBAHjB,cAKKhH,EAAQ/C,OACT,yBAAQkF,MAAOnC,EAAQK,SAAUY,KAAMjB,EAAQ/C,OAAQgF,SAAU+D,EAAjE,UACI,wBAAQ7D,MAAM,OAAd,0BACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,UAAd,0BACA,wBAAQA,MAAM,MAAd,0BACA,wBAAQA,MAAM,MAAd,0BACA,wBAAQA,MAAM,UAAd,mCAdcnC,EAAQ/C,iBAwB1D,cAAC,IAAD,CAAWuJ,YAAY,IAAvB,SACK,SAACG,GAAD,OACG,eAACb,EAAD,2BACIa,EAASC,gBADb,IAEAC,IAAKF,EAASG,SAFd,UAICrG,EAAaG,QAAO,SAACF,GAClB,OAAgB,IAAZA,EAAGJ,QAERP,KAAI,SAACC,EAAQkF,GACZ,OACI,cAAC,IAAD,CAAWA,MAAOA,EAA4BmB,YAAarG,EAAQ/C,OAAnE,SACK,SAAC0J,GAAD,OACG,wDACIE,IAAKF,EAASG,UACVH,EAASI,iBACTJ,EAASK,gBAHjB,cAKKhH,EAAQ/C,OACT,yBAAQkF,MAAOnC,EAAQK,SAAUY,KAAMjB,EAAQ/C,OAAQgF,SAAU+D,EAAjE,UACI,wBAAQ7D,MAAM,OAAd,0BACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,UAAd,0BACA,wBAAQA,MAAM,MAAd,0BACA,wBAAQA,MAAM,MAAd,0BACA,wBAAQA,MAAM,UAAd,mCAdcnC,EAAQ/C,WAqB7C0J,EAASM,mBAIlB,cAAC,IAAD,CAAWT,YAAY,IAAvB,SACK,SAACG,GAAD,OACG,eAACb,EAAD,2BACIa,EAASC,gBADb,IAEAC,IAAKF,EAASG,SAFd,UAICrG,EAAaG,QAAO,SAACF,GAClB,OAAgB,IAAZA,EAAGJ,QAERP,KAAI,SAACC,EAAQkF,GACZ,OACI,cAAC,IAAD,CAAWA,MAAOA,EAA4BmB,YAAarG,EAAQ/C,OAAnE,SACK,SAAC0J,GAAD,OACG,wDACIE,IAAKF,EAASG,UACVH,EAASI,iBACTJ,EAASK,gBAHjB,cAKKhH,EAAQ/C,OACT,yBAAQkF,MAAOnC,EAAQK,SAAUY,KAAMjB,EAAQ/C,OAAQgF,SAAU+D,EAAjE,UACI,wBAAQ7D,MAAM,OAAd,0BACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,UAAd,0BACA,wBAAQA,MAAM,MAAd,0BACA,wBAAQA,MAAM,MAAd,0BACA,wBAAQA,MAAM,UAAd,mCAdcnC,EAAQ/C,WAqB7C0J,EAASM,yBChN5BC,GAAmB5H,IAAO2E,IAAV,wFAMhBkD,GAAgB7H,IAAOG,OAAV,mQAqFJ2H,OAtEf,WAAgB,IAAD,EAC2BzF,IAAMC,SAAqB,IADtD,mBACNnB,EADM,KACQiB,EADR,OAEuBC,IAAMC,UAAkB,GAF/C,mBAENyF,EAFM,KAEMC,EAFN,KAoDb,OAJA3F,IAAM4F,WAAU,WACdjK,QAAQC,IAAIkD,KACZ,CAACA,IAGD,cAACyG,GAAD,WACkB,IAAfG,EACC,qCACE,cAAC,EAAD,CAAY5G,aAAcA,EAAciB,gBAAiBA,IACzD,cAAC,GAAD,CAAWjB,aAAcA,EAAciB,gBAAiBA,IACxD,cAACyF,GAAD,CAAe/E,QAtDF,SAACL,GAChBtB,EAAaU,OAAO,IAAM,EAC5BE,MAAM,wEAENiG,GAAc,IAkDV,SAAuC,iCAG3C,gCACE,cAAC,EAAD,CAAS7G,aAAcA,IACvB,cAAC0G,GAAD,CAAe/E,QAnDG,SAACL,GACvBuF,GAAc,IAkDV,SAA0C,oC,MCvFlDE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e7a60e62.chunk.js","sourcesContent":["export const serverUrl = 'https://us-central1-seismic-sweep-318403.cloudfunctions.net';","import axios from 'axios'\nimport { serverUrl } from '../assets/config'\n\nexport const getUserAccountId = async (userId:string): Promise<any>=> {\n    // const response = await axios.get(`http://localhost:5000/seismic-sweep-318403/us-central1/getUserInfo/fetchUserAccountId?userId=${userId}`)\n    const response = await axios.get(`${serverUrl}/getUserInfo/fetchUserAccountId?userId=${userId}`)\n    console.log(response.data)\n    if (response) {\n        return response.data.userAccountId\n    } else {\n        throw new Error('Not Exist UserID')\n    }\n}\n\nexport const getUserInfo = async (id:string): Promise<any> => {\n    // const response = await axios.get(`http://localhost:5000/seismic-sweep-318403/us-central1/getUserInfo/fetchUserInfo?id=${id}`,)\n    const response = await axios.get(`${serverUrl}/getUserInfo/fetchUserInfo?id=${id}`,)\n    if (response) {\n        return response.data.userInfo\n    } else {\n        throw new Error('Not Exist UserInfo')\n    }\n}","/**\n   * i 450 ~ 750\n   * b 800 ~ 1100\n   * s 1150 ~ 1450\n   * g 1500 ~ 1800\n   * p 1850 ~ 2150\n   * d 2200 ~ 2500\n   * m 2550 ~ 3050\n   * gm 3100 + point\n   */\ntype TierMMR = {\n  [k in string]: number\n}\n\nexport const tierMMR:TierMMR = {\n  IRON: 450,\n  BRONZE:800,\n  SILVER:1150,\n  GOLD:1500,\n  PLATINUM:1850,\n  DIAMOND:2200,\n  // 마스터티어부터 모두 'I'티어이기 때문에 300점을 깍아줬다 calculate에서 300을 더하기 때문\n  MASTER:2250,\n  GRANDMASTER:2250,\n  CHALLENGER:2250,\n}\n\ntype RankMMR = {\n  [k in string]:number\n}\n\nexport const rankMMR:RankMMR = {\n  IV: 0,\n  III: 100,\n  II: 200,\n  I: 300,\n}\n\nexport const winPercentMMR = 10","import { MaterialMMR } from '../../types/type';\nimport { rankMMR, tierMMR, winPercentMMR } from '../assets/gameEnv';\n\nconst winRateMMr = (wins:number,losses:number):number => {\n  const winrate = Math.round((wins/(wins+losses)*100) * 10) / 10\n  return (winrate-50)*winPercentMMR\n  //(winrate - 50) * winPercentMMr\n}\n\nconst calculateMMR = (rank:string,tier:string,leaguePoints:number) => {\n  /**\n   * i 450 ~ 750\n   * b 800 ~ 1100\n   * s 1150 ~ 1450\n   * g 1500 ~ 1800\n   * p 1850 ~ 2150\n   * m 2200 ~ 2500\n   * gm 2550 ~ 3050\n   * c 3100 ~ +point\n   */\n  const convertTier = tierMMR[tier]\n  const convertRank = rankMMR[rank]\n  return convertTier + convertRank + leaguePoints\n}\n\nexport const calculate = (userInfo: MaterialMMR) => {\n  const convertWinRateMMR = winRateMMr(userInfo.wins,userInfo.losses)\n  \n  const convertTierMMR = calculateMMR(userInfo.rank,userInfo.tier,userInfo.leaguePoints)\n  return convertWinRateMMR + convertTierMMR\n}","import React from 'react';\nimport { UserInfo, MaterialMMR } from '../../types/type';\nimport { getUserInfo, getUserAccountId } from '../utils/getUserInfo';\nimport { calculate } from '../utils/calculate';\nimport styled from 'styled-components';\n\nconst Search = styled.input`\n  border: 0;\n`;\n\nconst SearchButton = styled.button`\n  border: 0;\n  background-color: #BDBDC0;\n  color: #3E3F47;\n\n  &:hover {\n    background-color: #3E3F47;\n    color:  #BDBDC0;\n  }\n`;\n\nconst divUserId = (combinedID:string): string[] => {\n  const regExp = /([a-z|A-z|0-9|ㄱ-ㅎ|ㅏ-ㅣ|가-힣]){1,}(님이 로비에 참가하셨습니다.)/g\n  const divisionId = combinedID.match(regExp)\n\n  const userIdGroup = divisionId?.map((element) => {\n    return element.replace('님이 로비에 참가하셨습니다.','')\n  })\n  if (divisionId === null) {\n    return [combinedID]\n  } else {\n    if (userIdGroup !== undefined) return userIdGroup;\n    return ['']\n  }\n}\n\n// default값 (underRank)는 실버 1 0포인트 승률: 50% 입니다.\nconst underRankMMR:MaterialMMR = {\n  tier: 'SILVER',\n  rank: 'I',\n  wins: 1,\n  losses: 1,\n  leaguePoints: 0,\n} \n\nconst underRankUserInfo: UserInfo = {\n  userId: '',\n  ...underRankMMR,\n  position: 'None',\n  team: 0,\n  mmr: calculate(underRankMMR)\n}\n\nconst getUserRankInfo = (userInfoList: UserInfo[]): UserInfo|undefined => {\n  \n  const userRankInfo = userInfoList.map((el:any):UserInfo|undefined => {\n    \n    if (el.queueType === \"RANKED_SOLO_5x5\") {\n      const { tier,rank,wins,losses,leaguePoints } = el\n      const materialMMR:MaterialMMR = {\n        tier,rank,wins,losses,leaguePoints\n      } \n      \n      return {\n        userId: '',\n        tier,\n        rank,\n        wins,\n        losses,\n        leaguePoints,\n        team: 0,\n        mmr: calculate(materialMMR)\n      }\n    }\n  }).filter((el) => {\n    if (el) {\n      return true\n    }\n  })\n  return userRankInfo[0]\n}\n\nconst getUserInfoList = async (idState:string,userInfoList:UserInfo[]):Promise<any> => {\n\n  const fetchUserInfoList = await Promise.all(divUserId(idState).map(async(element) => {\n    try{\n      const {id,name} =  await getUserAccountId(element)\n\n      const userInfo = await getUserInfo(id)\n\n      const userRankInfo = {\n        ...underRankUserInfo,\n        ...getUserRankInfo(userInfo),\n        userId: name\n      }\n      \n\n      // 중복검사\n      const confirmUserID = userInfoList.filter((element) => {\n        if (element.userId === name) return true\n      })\n\n      if (confirmUserID.length === 0) {\n        \n        return ({\n          ...userRankInfo\n        })\n      }\n      \n    } catch(err) {\n      switch (err.message) {\n        case 'Not Exist UserID':\n          alert(`${element}는 찾을 수 없는 아이디입니다.`)\n          break\n        case 'Not Exist UserInfo':\n          alert(`${element}의 랭크정보를 불러올 수 없습니다.`)\n          break\n        default:\n          alert(`${err.message} 알 수 없는 에러`)\n      }\n    }\n  }))\n\n  const filtUndefinedData = fetchUserInfoList.filter((el) => {if (el) return true})\n  return filtUndefinedData\n}\n\ninterface Props {\n  userInfoList:UserInfo[],\n  setUserInfoList:React.Dispatch<React.SetStateAction<UserInfo[]>>,\n}\n\nconst InsertUser = (props: Props) => {\n  const {userInfoList, setUserInfoList} = props\n  const [idState, setIdState] = React.useState<string>('');\n\n  const addId = async (e:React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    \n    const response = await  getUserInfoList(idState,userInfoList)\n    \n    setUserInfoList([\n      ...response,\n      ...userInfoList,\n    ])\n  };\n\n  return(\n    <>\n      <Search type=\"text\" onChange={(e) => {setIdState(e.target.value)}} />\n      <SearchButton onClick={addId}>{`검색`}</SearchButton>\n    </>\n  );\n}\nexport default InsertUser;","import { UserInfo } from \"../../types/type\"\n\ntype DivedTeam = {\n    redTeam: UserInfo[],\n    blueTeam: UserInfo[]\n}\n\ninterface UserInfoIDX extends UserInfo {\n    idx:number\n}\n\nconst makeBitMaskDivision = (userInfoList: UserInfoIDX[], teamBitMask:number): boolean => {\n    const userNoTeam = userInfoList.filter((el) => {\n        if (el.team === 0) {\n            return true\n        }\n        return false\n    }).sort((a,b) => {\n        return b.mmr - a.mmr\n    })\n\n    const userOneTeam = userInfoList.filter((el) => {\n        if (el.team === 1) {\n            return true\n        }\n    }).sort((a,b) => {\n        return b.mmr - a.mmr\n    })\n\n    const userTwoTeam = userInfoList.filter((el) => {\n        if (el.team === 2) {\n            return true\n        }\n    }).sort((a,b) => {\n        return b.mmr - a.mmr\n    })\n\n    let allUser = []\n    if (userTwoTeam[0]) {\n        allUser.push(userTwoTeam[0])\n    }\n    if (userOneTeam[0]) {\n        allUser.push(userOneTeam[0])\n    }\n    if (userNoTeam[0]) {\n        allUser.push( ...userNoTeam )\n    }\n\n    if (allUser.length < 2) {\n        return true\n    } else {\n        let splitedIdx = allUser.splice(0,2)\n        const one = splitedIdx[0].idx\n        const two = splitedIdx[1].idx\n        \n        const compareOne = teamBitMask & (1<<one)\n        const compareTwo = teamBitMask & (1<<two)\n\n        if (compareOne && compareTwo) {\n            return false\n        }\n        if (compareOne === 0 && compareTwo === 0) {\n            return false\n        }\n        return true\n    }\n}\n\nconst divisionPosition = (userInfoList:UserInfo[], teamBitMask:number) => {\n    const userInfoListWithIdx:UserInfoIDX[] = userInfoList.map((el,idx) => {\n        return {\n            idx:idx,\n            ...el,\n        }\n    })\n\n    const topUser = userInfoListWithIdx.filter((el) => {\n        if (el.position === 'Top') return true\n    })\n\n    const jugUser = userInfoListWithIdx.filter((el) => {\n        if (el.position === 'Junggle') return true\n    })\n\n    const midUser = userInfoListWithIdx.filter((el) => {\n        if (el.position === 'Mid') return true\n    })\n\n    const adcUser = userInfoListWithIdx.filter((el) => {\n        if (el.position === 'ADC') return true\n    })\n\n    const supUser = userInfoListWithIdx.filter((el) => {\n        if (el.position === 'Support') return true\n    })\n\n    if (topUser.length >= 2) {\n        if (!makeBitMaskDivision(topUser,teamBitMask)) {\n            \n            return false\n        }\n    }\n    if (jugUser.length >= 2) {\n        if (!makeBitMaskDivision(jugUser,teamBitMask)) {\n            return false\n        }\n    }\n    if (midUser.length >= 2) {\n        if (!makeBitMaskDivision(midUser,teamBitMask)) {\n            return false\n        }\n    }\n    if (adcUser.length >= 2) {\n        if (!makeBitMaskDivision(adcUser,teamBitMask)) {\n            return false\n        }\n    }\n    if (supUser.length >= 2) {\n        if (!makeBitMaskDivision(supUser,teamBitMask)) {\n            return false\n        }\n    }\n    return true\n}\n\nconst checkSelectedTeam = (userListLength:number, i:number,teamOne:number,teamTwo:number) => {\n\n    const reverseI = (1<<userListLength)-1-i\n\n    if ((i&teamOne) === teamOne && (reverseI&teamTwo) === teamTwo) {\n        return false\n    }\n\n    if ((reverseI&teamOne) === teamOne && (i&teamTwo) === teamTwo) {\n        return false\n    }\n\n    return true\n}\n\nexport const divisionTeam= (userList: UserInfo[]): DivedTeam => {\n    let teamBitMask = -1\n    let diff = -1\n    const userListLength = userList.length\n\n    let teamOneBitMask = 0\n    let teamTwoBitMask = 0\n    for (let i = 0 ; i < userListLength; i++) {\n        if (userList[i].team === 1) {\n            teamOneBitMask |= (1 << i)\n        } else if (userList[i].team === 2) {\n            teamTwoBitMask |= (1 << i)\n        }\n    }\n\n    console.log('team >>>', teamOneBitMask,teamTwoBitMask)\n\n    for (let i = 0; i < (1<<userList.length); i++) {\n\n        let teamOneMMR = 0\n        let teamTwoMMR = 0\n        let count = 0\n\n        for (let k = 0; k < userList.length; k++) {\n            if (((1 << k) & i )) {\n                count += 1\n                teamOneMMR += userList[k].mmr\n            } else {\n                teamTwoMMR += userList[k].mmr\n            }\n        }\n\n        if (userList.length/2 !== count) {\n            continue\n        }\n\n        if (!divisionPosition(userList,i)) continue\n\n        if (checkSelectedTeam(userListLength,i,teamOneBitMask,teamTwoBitMask)) continue\n\n        const teamDiff = teamOneMMR-teamTwoMMR\n        \n        if (diff === -1 || Math.abs(diff) > Math.abs(teamDiff)) {\n            console.log(i)\n            diff = teamDiff\n            teamBitMask = i\n        }\n    }\n    \n    const teamOne = userList.filter((element,index) => {\n        if (teamBitMask & (1<<index)) {\n            return true\n        } else {\n            return false\n        }\n    })\n    const teamTwo = userList.filter((element,index) => {\n        if (teamBitMask & (1<<index)) {\n            return false\n        } else {\n            return true\n        }\n    })\n\n    if (diff >= 0) {\n        return {\n            redTeam: teamOne,\n            blueTeam: teamTwo,\n        }\n    } else {\n        return {\n            redTeam: teamTwo,\n            blueTeam: teamOne,\n        }\n    }\n}\n","import React from 'react';\nimport { UserInfo } from '../../types/type';\nimport { divisionTeam } from '../utils/division';\nimport styled, { css } from 'styled-components';\n\ninterface TeamNameProps {\n  teamColor: 'red'|'blue';\n}\n\nconst DivTeamContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst PrintTeam = styled.div`\n  position: relative;\n  width: 40%;\n  min-height: 100px;\n  margin: 10px;\n  border: 1px solid red;\n\n`;\n\nconst TeamName = styled.h4`\n  position: absolute;\n  top: -30px;\n\n  ${({teamColor}:TeamNameProps) => {\n    if (teamColor === 'red') {\n      return css`\n        background-color: red;\n    `;\n    }\n    \n\n    else if (teamColor === 'blue') {\n      return css`\n        background-color: blue;\n      `\n    }\n  }}\n`;\n\ninterface Props {\n  userInfoList: UserInfo[]\n}\n\nconst DivTeam = (props: Props) => {\n  const {redTeam, blueTeam} = divisionTeam(props.userInfoList)\n  \n  return (\n    <DivTeamContainer>\n      <PrintTeam>\n        <TeamName teamColor='red'>{'레드팀'}</TeamName>\n        {redTeam.map((el,idx) => {\n          return (\n            <p key={idx}>{el.userId}</p>\n          )\n        })}\n      </PrintTeam>\n      <PrintTeam>\n        <TeamName teamColor='blue'>{'블루팀'}</TeamName>\n        {blueTeam.map((el,idx) => {\n          return (\n            <p key={idx}>{el.userId}</p>\n          )\n        })}\n      </PrintTeam>\n    </DivTeamContainer>\n  );\n}\n\nexport default DivTeam","import { UserInfo } from '../../types/type';\n\n// 한팀에 중복된 라인\nexport const overlapPosition = (userInfoList:UserInfo[]):boolean => {\n\n    const teamOne = userInfoList.filter((el) => {\n        if (el.team === 1 && el.position !== 'None') {\n            return true\n        }\n    }).map((el) => {\n        return el.position\n    })\n\n    const setTeamOne = new Set(teamOne)\n    if (teamOne.length !== setTeamOne.size) {\n        return false\n    }\n\n    const teamTwo =  userInfoList.filter((el) => {\n        if (el.team === 2 && el.position !== 'None') {\n            return true\n        }\n    }).map((el) => {\n        return el.position\n    })\n    \n    const setTeamTwo = new Set(teamTwo)\n    if (teamTwo.length !== setTeamTwo.size ) {\n        return false\n    }\n\n    return true\n}\n// team인원 초과\nexport const excessPersonnel = (userInfoList:UserInfo[]):boolean => {\n    const teamOne = userInfoList.filter((el) => {\n        if (el.team === 1) {\n            return true\n        }\n    })\n    \n    if (teamOne.length > userInfoList.length/2) {\n        return false\n    }\n\n    const teamTwo =  userInfoList.filter((el) => {\n        if (el.team === 2) {\n            return true\n        }\n    })\n\n    if (teamTwo.length > userInfoList.length/2) {\n        return false\n    }\n\n    return true\n}\n\nexport const checkValidTeam = (userInfoList:UserInfo[]) => {\n    if (! overlapPosition(userInfoList)) {\n        throw new Error('overlapPosition')\n    }\n    if (! excessPersonnel(userInfoList)) {\n        throw new Error('excessPersonnel')\n    }\n}","import React from 'react';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { UserInfo, Position } from '../../types/type';\nimport { checkValidTeam } from '../utils/checkValidTeam';\n\nconst DragNDropStyle = styled.div`\n    margin-top: 10px;\n    display: flex;\n    justify-content: space-around;\n`;\n\nconst DropStyle = styled.div`\n    width: 250px;\n    padding: 30px;\n    border: 1px solid #BDBDC0;\n    border-radius: 5px\n`;\n\ninterface Props {\n    userInfoList: UserInfo[]\n    setUserInfoList: React.Dispatch<React.SetStateAction<UserInfo[]>>\n}\n\nconst DragNDrop = ({userInfoList, setUserInfoList}: Props) => {\n    const positionChange = (e:React.ChangeEvent<HTMLSelectElement>) => {\n        const position = e.target.value as Position\n        \n        const changeUserPosition = userInfoList.map((element) => {\n            if (element.userId === e.target.name) {\n            return {\n                ...element,\n                position: position\n            }\n            } else {\n            return {\n                ...element\n            }\n            }\n        })\n        try {\n            checkValidTeam(changeUserPosition)\n        } catch(err) {\n            switch (err.message) {\n            case 'overlapPosition':\n                alert('한 팀에 중복된 라인이 있습니다.')\n                break\n            case 'excessPersonnel':\n                alert('한 팀에 너무 많은 인원이 있습니다.')\n                break\n            default:\n                alert('알 수 없는 오류')\n            }\n        }\n        setUserInfoList(changeUserPosition)\n    }\n\n    const selectTeam = (e:React.ChangeEvent<HTMLSelectElement>) => {\n        const team = parseInt(e.target.value)\n\n        const changeUserTeam = userInfoList.map((element) => {\n            if (element.userId === e.target.name) {\n            return {\n                ...element,\n                team: team\n            }\n            } else {\n            return {\n                ...element\n            }\n            }\n        })\n        try {\n            checkValidTeam(changeUserTeam)\n        } catch (err) {\n            switch (err.message) {\n            case 'overlapPosition':\n                alert('한 팀에 중복된 라인이 있습니다.')\n                break\n            case 'excessPersonnel':\n                alert('한 팀에 너무 많은 인원이 있습니다.')\n                break\n            default:\n                alert('알 수 없는 오류')\n            }\n        }\n        setUserInfoList(changeUserTeam)\n    }\n\n    const onDragEnd = (result:DropResult) => {\n        const { draggableId, destination } = result;\n\n        const movedTeam = destination ?  destination.droppableId : '0';\n\n        const moveUserInfo = userInfoList.map((el) => {\n            if (el.userId === draggableId) {\n                return {\n                    ...el,\n                    team: parseInt(movedTeam)\n                }\n            } else {\n                return {\n                    ...el\n                }\n            }\n        })\n        console.log(moveUserInfo)\n        setUserInfoList(moveUserInfo)\n    }\n\n    return (\n        <DragNDropStyle>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId='0'>\n                    {(provided) => (\n                        <DropStyle\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                        >\n                            {userInfoList.filter((el) => {\n                                if (el.team === 0) return true\n                                return false\n                            }).map((element,index) => {\n                                return (\n                                    <Draggable index={index} key={element.userId} draggableId={element.userId}>\n                                        {(provided) => \n                                            <p\n                                                ref={provided.innerRef}\n                                                {...provided.dragHandleProps}\n                                                {...provided.draggableProps}\n                                            >\n                                                {element.userId}\n                                                <select value={element.position} name={element.userId} onChange={positionChange}>\n                                                    <option value=\"None\">{`없음`}</option>\n                                                    <option value=\"Top\">{`탑`}</option>\n                                                    <option value=\"Junggle\">{`정글`}</option>\n                                                    <option value=\"Mid\">{`미드`}</option>\n                                                    <option value=\"ADC\">{`원딜`}</option>\n                                                    <option value=\"Support\">{`서폿`}</option>\n                                                </select>\n                                            </p>\n                                        }\n                                    </Draggable>\n                                );\n                            })}\n                        </DropStyle>\n                    )}\n                </Droppable>\n                <Droppable droppableId='1'>\n                    {(provided) => (\n                        <DropStyle\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                    >\n                        {userInfoList.filter((el) => {\n                            if (el.team === 1) return true\n                            return false\n                        }).map((element,index) => {\n                            return (\n                                <Draggable index={index} key={element.userId} draggableId={element.userId}>\n                                    {(provided) => \n                                        <p\n                                            ref={provided.innerRef}\n                                            {...provided.dragHandleProps}\n                                            {...provided.draggableProps}\n                                        >\n                                            {element.userId}\n                                            <select value={element.position} name={element.userId} onChange={positionChange}>\n                                                <option value=\"None\">{`없음`}</option>\n                                                <option value=\"Top\">{`탑`}</option>\n                                                <option value=\"Junggle\">{`정글`}</option>\n                                                <option value=\"Mid\">{`미드`}</option>\n                                                <option value=\"ADC\">{`원딜`}</option>\n                                                <option value=\"Support\">{`서폿`}</option>\n                                            </select>\n                                        </p>\n                                    }\n                                </Draggable>\n                            );\n                        })}\n                        {provided.placeholder}\n                    </DropStyle>\n                    )}\n                </Droppable>\n                <Droppable droppableId='2'>\n                    {(provided) => (\n                        <DropStyle\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                    >\n                        {userInfoList.filter((el) => {\n                            if (el.team === 2) return true\n                            return false\n                        }).map((element,index) => {\n                            return (\n                                <Draggable index={index} key={element.userId} draggableId={element.userId}>\n                                    {(provided) => \n                                        <p\n                                            ref={provided.innerRef}\n                                            {...provided.dragHandleProps}\n                                            {...provided.draggableProps}\n                                        >\n                                            {element.userId}\n                                            <select value={element.position} name={element.userId} onChange={positionChange}>\n                                                <option value=\"None\">{`없음`}</option>\n                                                <option value=\"Top\">{`탑`}</option>\n                                                <option value=\"Junggle\">{`정글`}</option>\n                                                <option value=\"Mid\">{`미드`}</option>\n                                                <option value=\"ADC\">{`원딜`}</option>\n                                                <option value=\"Support\">{`서폿`}</option>\n                                            </select>\n                                        </p>\n                                    }\n                                </Draggable>\n                            );\n                        })}\n                        {provided.placeholder}\n                    </DropStyle>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </DragNDropStyle>\n    );\n}\n\nexport default DragNDrop","import React from 'react';\nimport InsertUser from './components/InsertUser';\nimport DivTeam from './components/DivTeam'\nimport { UserInfo, Position } from '../types/type'\nimport { checkValidTeam } from './utils/checkValidTeam';\nimport styled from 'styled-components';\nimport DragNDrop from './components/DragNDrop';\n\nconst SelectOptionUser = styled.div`\n  width: 100%;\n  text-align: center;\n  margin-top: 3rem;\n`;\n\nconst DivTeamButton = styled.button`\n  margin-top: 10px;\n  width: 120px;\n  height: 50px;\n  border: 1px solid #BDBDC0;\n  border-radius: 2px;\n  background-color: #BDBDC0;\n  color: #3E3F47;\n\n  &:hover {\n    background-color: #3E3F47;\n    color:  #BDBDC0;\n  }\n`;\n\nfunction App() {\n  const [userInfoList, setUserInfoList] = React.useState<UserInfo[]>([]);\n  const [runDivTeam, setRunDivTeam] = React.useState<boolean>(false);\n\n  const clickDivTeam = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (userInfoList.length%2 !== 0) {\n      alert('인원을 짝수로 맞춰주세요')\n    } else {\n      setRunDivTeam(true)\n    }\n  }\n\n  const clickSearchTeam = (e: React.MouseEvent<HTMLButtonElement>) => {\n    setRunDivTeam(false)\n  }\n\n  const selectTeam = (e:React.ChangeEvent<HTMLSelectElement>) => {\n    const team = parseInt(e.target.value)\n\n    const changeUserTeam = userInfoList.map((element) => {\n      if (element.userId === e.target.name) {\n        return {\n          ...element,\n          team: team\n        }\n      } else {\n        return {\n          ...element\n        }\n      }\n    })\n    try {\n      checkValidTeam(changeUserTeam)\n    } catch (err) {\n      switch (err.message) {\n        case 'overlapPosition':\n          alert('한 팀에 중복된 라인이 있습니다.')\n          break\n        case 'excessPersonnel':\n          alert('한 팀에 너무 많은 인원이 있습니다.')\n          break\n        default:\n          alert('알 수 없는 오류')\n      }\n    }\n    setUserInfoList(changeUserTeam)\n  }\n  \n  React.useEffect(() => {\n    console.log(userInfoList)\n  },[userInfoList])\n\n  return (\n    <SelectOptionUser>\n      {runDivTeam === false ?\n        <>\n          <InsertUser userInfoList={userInfoList} setUserInfoList={setUserInfoList}/>\n          <DragNDrop userInfoList={userInfoList} setUserInfoList={setUserInfoList}/>\n          <DivTeamButton onClick={clickDivTeam}>{'팀 나누기'}</DivTeamButton>\n        </>\n      :\n      <div>\n        <DivTeam userInfoList={userInfoList} />\n        <DivTeamButton onClick={clickSearchTeam}>{'인원 수정'}</DivTeamButton>\n      </div>\n      }\n    </SelectOptionUser>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}